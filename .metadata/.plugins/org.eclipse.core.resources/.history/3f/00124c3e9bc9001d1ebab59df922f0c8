package lanqiao;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class BFSBFSBFS {

	static FastScanner cin = new FastScanner(System.in);//快读
	static PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));//快速输出
	
	static int kmin = Integer.MAX_VALUE;
	static int emin = Integer.MAX_VALUE;

	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
		// Scanner sc = new Scanner(System.in);
		// InputStream inputStream = System.in;
		
		int T = cin.nextInt();
		for (int i = 0; i < T; ++i) {
			
			int n = cin.nextInt();
			int m = cin.nextInt();

			char map[][] = new char[n][m];
			int px = 0, py = 0, ex = 0, ey = 0;
			ArrayList<int[]> kdata= new ArrayList<>();
			for (int y = 0; y < n; ++y) {

				String res = cin.next();
				map[y] = res.toCharArray();

				for (int t = 0; t < map[y].length; ++t) {
					if (map[y][t] == 'P') {
						px = t;
						py = y;
					}
					if (map[y][t] == 'E') {
						ex = t;
						ey = y;
					}
					if (map[y][t] == 'K') {
						kdata.add(new int[] {t,y,0,0});
					}
				}
			}


			// 搜寻人到钥匙
			boolean state[][] = new boolean[n][m];
			state[py][px] = true;
			state[ey][ex] = true;
			ArrayList<int[]> e = new ArrayList<int[]>();
			e.add(new int[] {0,1});
			int kf=bfs(map, state, px, py,kdata, 0);
			
			
			// 搜寻钥匙到出口
			state = new boolean[n][m];
			int ef=bfs(map, state, ex, ey, kdata, 0);
			if (ef<=0 || kf<=0)
				System.out.println("No solution");
			else
				System.out.println(ef + kf);
		}

	}

	
	
	
	
	
	public static int bfs(char map[][], boolean state[][], int x, int y, ArrayList<int[]> kdata, int step,int model) {

		int sumKey =0;
		Queue<int[]> qu = new LinkedList<int[]>();
		qu.offer(new int[] { x, y, step });
		while (!qu.isEmpty()) {
			int point[] = qu.poll();
			for(int e[]:kdata) {
				if (point[0] == e[0] && point[1] == e[1]) {
					++sumKey;
					//return point[2];
					return point[2];
				}
			}
			

			int next[][] = { { point[0], point[1] - 1 }, { point[0], point[1] + 1 }, { point[0] - 1, point[1] },
					{ point[0] + 1, point[1] } };
			for (int i = 0; i < next.length; ++i) {

				// 过滤
				if (next[i][0] < 0 || next[i][1] < 0 || next[i][0] >= map[0].length || next[i][1] >= map.length)
					continue;

				if (map[next[i][1]][next[i][0]] == '#')
					continue;

				if (state[next[i][1]][next[i][0]])
					continue;

				state[next[i][1]][next[i][0]] = true;
				qu.offer(new int[] { next[i][0], next[i][1], point[2] + 1 });
			}
		}
		return -1;
	}
	
	
	
	static class FastScanner{//用于快速读入大量数据
		BufferedReader br;
		StringTokenizer st;
		public FastScanner(InputStream in) {
			br = new BufferedReader(new InputStreamReader(in),16384);
			eat("");
		}
		public void eat(String s) {
			st = new StringTokenizer(s);
		}
		public String nextLine() {
			try {
				return br.readLine();
			} catch (IOException e) {
				return null;
			}
		}
		public boolean hasNext() {
			while(!st.hasMoreTokens()) {
				String s = nextLine();
				if(s==null) return false;
				eat(s);
			}
			return true;
		}
		public String next() {
			hasNext();
			return st.nextToken();
		}
		public int nextInt() {
			return Integer.parseInt(next());
		}
	}


}