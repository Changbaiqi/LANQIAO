package lanqiao;

import java.util.Arrays;
import java.util.Scanner;

public class ÊÖ»úºÅÂë {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner sc = new Scanner(System.in);
		
		long L = sc.nextLong();
		long R = sc.nextLong();
		
		System.out.println(slove(R)-slove(L-1));
	}
	
	
	public static long slove(long num) {
		long bit[] = new long[13];
		
		int i =0;
		while(num!=0) {
			bit[++i] = num%10;
			num/=10;
		}
		
		int dp[][] = new int[i+1][10];
		for(int x =0 ; x<=i ; ++i)
			Arrays.fill(dp[x], -1);
		
		return dfs(dp,bit,i,0,true,true);
	}
	
	
	public static long dfs(int dp[][],int bit[],int index,int preNum,boolean limit,boolean zero) {
		if(index==0)
			return 1;
		
		if(!limit && !zero&& dp[index][preNum]!=-1)
			return dp[index][preNum];
		
		int maxNum = limit?bit[index]:9;
		long ans =0;
		for(int i =0 ; i <=9 ; ++i) {
			if(zero&& i==0)
				ans+=dfs(dp,bit,index-1,0,limit&&i==bit[index]?true:false,true);
			else
				ans+=dfs(dp,bit,index-1,0,limit&&i==bit[index]?true:false,false);
		}
		
		return 1;
	}

}
