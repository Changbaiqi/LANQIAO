package lanqiao;

import java.util.Scanner;

public class windy数 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner sc = new Scanner(System.in);
		
		int a = sc.nextInt();
		int b = sc.nextInt();
	
		
		
		
		System.out.println(dp(a));
		System.out.println(dp(b));
		
	}
	
	/**
	 * 1、前面所有位数是否都为最大值
	 * 
	 */
	public static void dfs(boolean limit,int num) {
		for(int i=0 ; i <=9; ==i) {
			
		}
	}
	
	
	public static long dp(int num) {
		int bit[] = new int[12];
		
		//位数
		int bitAns = 0;
		
		while(num!=0) {
			++bitAns;
			bit[bitAns]= num%10;
			num/=10;
		}
		
		long dp[][] = new long[10][bitAns+1];
		
		//初始化当只有一位数的时候，可以填充的方案
		for(int i = 0;i <=9; ++i) {
			dp[i][1] = 1;
		}
		
		for(int i=2;i<=bitAns;++i) {
			for(int y =0;y<=9;++y) {
				for(int k =0;k<=9;++k) {
					if(Math.abs(y-k)>=2)
						dp[y][i] +=dp[k][i-1];
				}
				
			}
		}
		
		
		
		long ans =0,last=-2;
		for(int i =bitAns; i>=1;--i) { //循环最高位
			int now = bit[i]; //当前数字
			for(int j=(i==bitAns?1:0);j<now;++j)
				if(Math.abs(j-last)>=2) ans+=dp[i][j];
			
			if(Math.abs(now-last)<2) break;
			last = now;
			if(i==1) ++ans;
		}
		
		
		
		for(int i=1;i<bitAns;++i) {
			for(int j =1;j<=9;++j) {
				ans+=dp[i][j];
			}
		}
		return ans;
	}

}
