package lanqiao;

import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class ∑¢œ÷ª∑ {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner sc = new Scanner(System.in);
		
		int N = sc.nextInt();
		Side sides[] = new Side[N];
		
		HashSet<Integer> data = new HashSet<>();
		
		
		
		for(int i = 0 ;i< N ; ++i) {
			Integer x = sc.nextInt();
			Integer y = sc.nextInt();
			data.add(x);
			data.add(y);
			sides[i]=new Side(x, y);
		}
		Integer arrData[]  =(Integer[])data.toArray(new Integer[0]);
		for(int i = 0 ; i< arrData.length ; ++i) {
			if(!bfs(sides,arrData[i]))
				System.out.println(arrData[i]);
		}
		
	}
	
	
	public static boolean bfs(Side sides[],Integer point) {
	 
		boolean in[] = new boolean[];
		Queue<Integer> qu = new LinkedList<Integer>();
		qu.offer(point);
		
		
		while(!qu.isEmpty()) {
			
			
			
			Integer cur = qu.poll();
			if(point == cur)
				return true;
			
			for(int i = 0 ;i<sides.length ; ++i) {
				if(sides[i].getEnd()==cur) {
					qu.offer(sides[i].getStart());
				}else if(sides[i].getStart()==cur) {
					qu.offer(sides[i].getEnd());
				}
			}
		}
		return false;               
	 
	 
	}

}


class Side{
	Integer start;
	Integer end;
	public Side(Integer start, Integer end) {
		super();
		this.start = start;
		this.end = end;
	}
	public Integer getStart() {
		return start;
	}
	public void setStart(Integer start) {
		this.start = start;
	}
	public Integer getEnd() {
		return end;
	}
	public void setEnd(Integer end) {
		this.end = end;
	}
	
	
	
}
